01/15/2024 00:35:53 - INFO - __main__ - ***** Running training *****
01/15/2024 00:35:53 - INFO - __main__ -   Num examples = 63704
01/15/2024 00:35:53 - INFO - __main__ -   Num Epochs = 100
01/15/2024 00:35:53 - INFO - __main__ -   Instantaneous batch size per device = 1
01/15/2024 00:35:53 - INFO - __main__ -   Total train batch size (w. parallel, distributed & accumulation) = 1
01/15/2024 00:35:53 - INFO - __main__ -   Gradient Accumulation steps = 1
01/15/2024 00:35:53 - INFO - __main__ -   Total optimization steps = 6370400
Steps:   0%|                                                                                                                                   | 0/6370400 [00:00<?, ?it/s]01/15/2024 00:35:53 - INFO - validation.log_validation - Running validation image inference...
/Users/miav1/miniconda3/envs/sdtf/lib/python3.10/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/Users/miav1/miniconda3/envs/sdtf/lib/python3.10/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/Users/miav1/miniconda3/envs/sdtf/lib/python3.10/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
collating 4
Caption 0: Image ID: 2378912 Caption: laptop sitting on table , laptop on top of table , person A near laptop , person B next to laptop , person C near laptop , person D standing next to table
Caption 1: Image ID: 2391168 Caption: box on side of motorcycle , woman holding helmet
Caption 2: Image ID: 2327158 Caption: child A holding umbrella A , child B holding umbrella B , sky between branch , girl A has umbrella C , girl B has pant , grass around girl A , grass around girl B
Caption 3: Image ID: 2366410 Caption: woman A sitting on bench , woman B sitting on chair
/Users/miav1/miniconda3/envs/sdtf/lib/python3.10/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
